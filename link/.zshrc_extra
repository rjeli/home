alias zed="$HOME/Applications/Zed.app/Contents/MacOS/cli"

rsyncgi () {
    [ $# -ne 1 ] && echo "usage: rsyncgi remote:path" && exit 1
    [[ "${1: -1}" == "/" ]] && echo "not recommended to end remote path with slash" && exit 1
    rsync -vhra . "$1" --include='**.gitignore' --exclude='/.git' --filter=':- .gitignore' --delete-after
}

# "gs-setup HOST"
#  - Creates a bare repo on HOST at ~/.gitsync/<project>.git
#  - Sets up a post-receive hook that checks out into ~/repos/<project>
gs-setup () {
  if [[ -z "$1" ]]; then
    echo "Usage: gs-setup <host>"
    return 1
  fi

  local host=$1
  local project
  project=$(basename "$PWD")

  echo "Setting up git sync on $host for project: $project"

  ssh "$host" /bin/bash <<EOF
    set -e
    mkdir -p ~/.gitsync
    mkdir -p ~/repos
    cd ~/.gitsync

    if [[ ! -d "$project.git" ]]; then
      git init --bare -b master "$project.git"

      cat <<'HOOK' >"$project.git/hooks/post-receive"
#!/usr/bin/env bash
set -e
export GIT_WORK_TREE="\$HOME/repos/PROJECT"
mkdir -p "\$GIT_WORK_TREE"
git checkout -f
HOOK

      sed -i "s/PROJECT/$project/g" "$project.git/hooks/post-receive"
      chmod +x "$project.git/hooks/post-receive"
      echo "Created bare repo ~/.gitsync/$project.git with post-receive hook."
    else
      echo "Repo ~/.gitsync/$project.git already exists on $host."
    fi
EOF
}



# "gs HOST"
#  - Pushes local HEAD into ~/.gitsync/<project>.git on HOST
#  - That triggers the checkout hook to update ~/repos/<project> on HOST
gs () {
  if [[ -z "$1" ]]; then
    echo "Usage: gs <host>"
    return 1
  fi

  local host=$1
  local project
  project=$(basename "$PWD")

  echo "Pushing local HEAD to $host:~/.gitsync/$project.git"
  git push "ssh://$host/~/.gitsync/$project.git" HEAD:master
}
